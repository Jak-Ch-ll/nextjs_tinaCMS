import { useCallback, useEffect } from "react";
import slugify from "slugify";
import { Form, useCMSEvent } from "tinacms";

/**
 * Allows the input of an url field to be auto generated by another field
 * @param form - the tinaCMS form
 * @param enabled - default true; toggles the automatic conversion
 * @param urlInputName - default 'url'; the name of the url field in the form
 * @param derivedInputName - default 'title'; the name of the field from the the url is generated
 */
export const useAutoURL = (
  form: Form,
  enabled: boolean = true,
  urlInputName = "url",
  derivedInputName = "title"
) => {
  const title = form.values[derivedInputName] || "";

  // function to add/remove disabled from url input field, depending on state of 'enabled'
  const toggleDisabled = useCallback(() => {
    const field = document.querySelector<HTMLInputElement>(
      `input[name='${urlInputName}']`
    );
    if (!enabled) {
      return field?.removeAttribute("disabled");
    }
    field?.setAttribute("disabled", "");
  }, [enabled, urlInputName]);

  // after first loading a page, the input field in the sidebar is not disabled, even if it should
  // that might be either because of SSR or Tina
  // to remedy, useCMSEvent will trigger on sidebar open and remove/add 'disabled' as necessary
  useCMSEvent(
    "sidebar",
    () => {
      toggleDisabled();
    },
    [toggleDisabled]
  );

  // add/remove 'disabled' from url input
  useEffect(() => {
    toggleDisabled();
  }, [toggleDisabled]);

  // auto update url on title change
  useEffect(() => {
    if (enabled) {
      const url = slugify(title, {
        lower: true,
        strict: true,
      });

      form.updateValues({
        url,
      });
    }
  }, [enabled, title, form]);
};
